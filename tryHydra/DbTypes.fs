// This code was generated by `SqlHydra.Npgsql` -- v2.4.0.0.
namespace Games.DbTypes


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module games =
    [<CLIMutable>]
    type games =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Integer")>]
          year: Option<int> }

    let games = SqlHydra.Query.Table.table<games>

    [<CLIMutable>]
    type games_with_info =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          rating: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          owner_name: Option<string> }

    let games_with_info = SqlHydra.Query.Table.table<games_with_info>

    [<CLIMutable>]
    type ratings =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: int
          [<SqlHydra.ProviderDbType("Integer")>]
          game_id: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          rating: decimal
          [<SqlHydra.ProviderDbType("Date")>]
          date: Option<System.DateOnly> }

    let ratings = SqlHydra.Query.Table.table<ratings>

    module Readers =
        type gamesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.year = OptionalColumn(reader, getOrdinal, reader.GetInt32, "year")

            member __.Read() =
                { games.id = __.id.Read()
                  name = __.name.Read()
                  year = __.year.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type games_with_infoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rating = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "rating")
            member __.owner_name = OptionalColumn(reader, getOrdinal, reader.GetString, "owner_name")

            member __.Read() =
                { games_with_info.name = __.name.Read()
                  rating = __.rating.Read()
                  owner_name = __.owner_name.Read() }

            member __.ReadIfNotNull() =
                if __.name.IsNull() then None else Some(__.Read())

        type ratingsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.game_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "game_id")
            member __.rating = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rating")
            member __.date = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "date")

            member __.Read() =
                { ratings.id = __.id.Read()
                  game_id = __.game_id.Read()
                  rating = __.rating.Read()
                  date = __.date.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

module people =
    [<CLIMutable>]
    type friends =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Integer")>]
          age: Option<int> }

    let friends = SqlHydra.Query.Table.table<friends>

    [<CLIMutable>]
    type game_owners =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: int
          [<SqlHydra.ProviderDbType("Integer")>]
          owner_id: int
          [<SqlHydra.ProviderDbType("Integer")>]
          game_id: int }

    let game_owners = SqlHydra.Query.Table.table<game_owners>

    module Readers =
        type friendsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.age = OptionalColumn(reader, getOrdinal, reader.GetInt32, "age")

            member __.Read() =
                { friends.id = __.id.Read()
                  name = __.name.Read()
                  age = __.age.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type game_ownersReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.owner_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "owner_id")
            member __.game_id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "game_id")

            member __.Read() =
                { game_owners.id = __.id.Read()
                  owner_id = __.owner_id.Read()
                  game_id = __.game_id.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazygamesgames = lazy (games.Readers.gamesReader (reader, buildGetOrdinal 3))
    let lazygamesgames_with_info = lazy (games.Readers.games_with_infoReader (reader, buildGetOrdinal 3))
    let lazygamesratings = lazy (games.Readers.ratingsReader (reader, buildGetOrdinal 4))
    let lazypeoplefriends = lazy (people.Readers.friendsReader (reader, buildGetOrdinal 3))
    let lazypeoplegame_owners = lazy (people.Readers.game_ownersReader (reader, buildGetOrdinal 3))
    member __.``games.games`` = lazygamesgames.Value
    member __.``games.games_with_info`` = lazygamesgames_with_info.Value
    member __.``games.ratings`` = lazygamesratings.Value
    member __.``people.friends`` = lazypeoplefriends.Value
    member __.``people.game_owners`` = lazypeoplegame_owners.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "games.games", false -> __.``games.games``.Read >> box
        | "games.games", true -> __.``games.games``.ReadIfNotNull >> box
        | "games.games_with_info", false -> __.``games.games_with_info``.Read >> box
        | "games.games_with_info", true -> __.``games.games_with_info``.ReadIfNotNull >> box
        | "games.ratings", false -> __.``games.ratings``.Read >> box
        | "games.ratings", true -> __.``games.ratings``.ReadIfNotNull >> box
        | "people.friends", false -> __.``people.friends``.Read >> box
        | "people.friends", true -> __.``people.friends``.ReadIfNotNull >> box
        | "people.game_owners", false -> __.``people.game_owners``.Read >> box
        | "people.game_owners", true -> __.``people.game_owners``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<bool []> then Some(wrap reader.GetFieldValue<bool []>)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int16 []> then Some(wrap reader.GetFieldValue<int16 []>)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int []> then Some(wrap reader.GetFieldValue<int []>)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int64 []> then Some(wrap reader.GetFieldValue<int64 []>)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<double []> then Some(wrap reader.GetFieldValue<double []>)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<decimal []> then Some(wrap reader.GetFieldValue<decimal []>)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<string []> then Some(wrap reader.GetFieldValue<string []>)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.Guid []> then Some(wrap reader.GetFieldValue<System.Guid []>)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<System.TimeSpan []> then Some(wrap reader.GetFieldValue<System.TimeSpan []>)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.DateOnly []> then Some(wrap reader.GetFieldValue<System.DateOnly []>)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.TimeOnly []> then Some(wrap reader.GetFieldValue<System.TimeOnly []>)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTime []> then Some(wrap reader.GetFieldValue<System.DateTime []>)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTimeOffset []> then Some(wrap reader.GetFieldValue<System.DateTimeOffset []>)
        else if t = typedefof<byte []> then Some(wrap reader.GetFieldValue<byte []>)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else if t = typedefof<char []> then Some(wrap reader.GetFieldValue<char []>)
        else if t = typedefof<float> then Some(wrap reader.GetFloat)
        else if t = typedefof<float []> then Some(wrap reader.GetFieldValue<float []>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
